<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Was ich so treibe...]]></title>
  <link href="http://uli-heller.github.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://uli-heller.github.com/"/>
  <updated>2013-08-07T10:00:49+02:00</updated>
  <id>http://uli-heller.github.com/</id>
  <author>
    <name><![CDATA[Uli Heller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Fork]]></title>
    <link href="http://uli-heller.github.com/blog/2013/07/21/git-fork/"/>
    <updated>2013-07-21T09:00:00+02:00</updated>
    <id>http://uli-heller.github.com/blog/2013/07/21/git-fork</id>
    <content type="html"><![CDATA[<h1>Git Fork</h1>

<p>Hier kurz meine Notizen zum Arbeiten mit GitHub Forks:</p>

<ul>
<li>Bestehendes Projekt &ldquo;forken&rdquo; &ndash;> einfach via GitHub-Webseite</li>
<li>Lokalen Clone hiervon anlegen: <code>git clone ...</code></li>
<li>Lokale Änderungen an GitHub schicken:
<code>git push origin master</code></li>
<li>Original-Projekt als &ldquo;upstream&rdquo; definieren:
<code>git remote add upstream ...</code></li>
<li>Lokale Kopie des Original-Projektes aktualisieren:
<code>git fetch upstream</code></li>
<li>Lokale Kopie des Original-Projektes &ldquo;einarbeiten&rdquo;:

<ul>
<li><code>git merge --no-commit upstream/master</code></li>
<li><code>git mergetool</code></li>
<li><code>git commit -m ...</code></li>
</ul>
</li>
</ul>


<p>Mehr Details: <a href="https://help.github.com/articles/fork-a-repo">https://help.github.com/articles/fork-a-repo</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quilt für mein Debian-Paket von Git]]></title>
    <link href="http://uli-heller.github.com/blog/2013/04/14/quilt-fuer-gitdeb/"/>
    <updated>2013-04-14T12:00:00+02:00</updated>
    <id>http://uli-heller.github.com/blog/2013/04/14/quilt-fuer-gitdeb</id>
    <content type="html"><![CDATA[<h1>Quilt: Umstellung der Patchverwaltung meines Git-Debian-Paketes auf Quilt</h1>

<p>Mein Git-Debian-Paket verwendet bislang keine vernünftige Patchverwaltung.
Stattdessen werden bei der Erzeugung des Paketes einfach alle Patches
unterhalb von debian/diff der Reihe nach angewandt. Blöderweise fallen so
gescheiterte Patchanwendungen nicht auf, außerdem werden im Source-Paket
teilweise Original-Dateien modifiziert &ndash; vermutlich weil einige Patches
nicht sauber zurückgerollt werden.</p>

<p>Also: Ich will Quilt haben!</p>

<!-- more -->


<h2>Sichtung des Debian-Paketes von Subversion</h2>

<ul>
<li>Patches liegen unter debian/patches und nicht unter debian/diff</li>
<li>Es gibt eine Datei namens debian/patches/series, die alle Patches auflistet</li>
<li>In debian/rules sind einige Änderungen vorzunehmen</li>
</ul>


<p>Die ersten beiden Punkte sind schnell erledigt:</p>

<ul>
<li><code>mv debian/diff debian/patches</code></li>
<li><code>cd debian/patches; (ls|grep -v series) &gt;series</code></li>
</ul>


<p>Bleibt noch die Anpassung von debian/rules!</p>

<h2>Anpassungen an &ldquo;debian/rules&rdquo;</h2>

<p>An der Datei &ldquo;debian/rules&rdquo; müssen qualitativ diese Änderungen vorgenommen
werden:</p>

<ul>
<li>Einbinden der Datei /usr/share/quilt/quilt.make</li>
<li>Ziele &ldquo;patch&rdquo; und &ldquo;patch-stamp&rdquo; entfernen</li>
<li>Ziele &ldquo;debian/stamp-autogen&rdquo; und &ldquo;debian/stamp-configure&rdquo; neu aufnehmen
Bei &ldquo;debian/stamp-configure&rdquo; wird ein Verweis auf &ldquo;patches&rdquo; angelegt</li>
<li>Verweise auf &ldquo;patch-stamp&rdquo; ersetzen durch &ldquo;$(QUILT_STAMPFN)&rdquo;</li>
<li>Im Ziel &ldquo;clean&rdquo; diese Änderungen vornehmen:

<ul>
<li>Neue Abhängigkeit zu &ldquo;unpatch&rdquo; festlegen</li>
<li>Neuer Aufruf: dh_testdir</li>
<li>Neuer Aufruf: dh_clean</li>
<li>Verweis auf &ldquo;patches&rdquo; löschen</li>
<li>Manuelle Logik zum Zurücknehmen der Patches entfernen</li>
</ul>
</li>
</ul>


<p>Die Änderungen sind im nachfolgenden DIFF zusammengefasst.</p>

<p>{% codeblock Anpassungen an debian/rules lang:diff %}
&mdash;&ndash; ../git-1.8.2.1_ok/debian/rules  2013-04-13 19:55:00.061153212 +0200
+++ debian/rules    2013-04-14 09:36:24.782564149 +0200
@@ -37,19 +37,30 @@
 TMP =$(shell pwd)/tmp
 GIT =$(shell pwd)/debian/git</p>

<p>-patch: deb-checkdir patch-stamp
-patch-stamp:
&ndash;   cp gitk-git/gitk gitk-git/gitk.uli.orig
&ndash;   for i in <code>ls -1 debian/diff/*.diff debian/diff/*.patch \
-       2&gt;/dev/null || :</code>; do \
&ndash;     patch -p1 -N -r- &lt;$$i || test $$? = 1 || exit 1; \
&ndash;   done
&ndash;   touch patch-stamp
+include /usr/share/quilt/quilt.make
+
+debian/stamp-autogen:  $(QUILT_STAMPFN)
+   $(DONT_BE_ROOT)
+   ./autogen.sh
+   touch $@
+
+debian/stamp-configure:    $(QUILT_STAMPFN) debian/stamp-autogen
+   dh_testdir
+   test -e patches || ln -s debian/patches patches
+
+#patch: deb-checkdir patch-stamp
+#patch-stamp:
+#  cp gitk-git/gitk gitk-git/gitk.uli.orig
+#  for i in <code>ls -1 debian/diff/*.diff debian/diff/*.patch \
+#      2&gt;/dev/null || :</code>; do \
+#    patch -p1 -N -r- &lt;$$i || test $$? = 1 || exit 1; \
+#  done
+#  touch patch-stamp</p>

<p> build: build-arch build-indep</p>

<p> build-arch: deb-checkdir build-arch-stamp
-build-arch-stamp: patch-stamp
+build-arch-stamp: $(QUILT_STAMPFN)</p>

<pre><code>-$(CC) -v
DESTDIR='$(GIT)' $(MAKE) all $(OPTS)
cd contrib/subtree; DESTDIR='$(GIT)' $(MAKE) all $(OPTS)
</code></pre>

<p>@@ -66,7 +77,7 @@</p>

<pre><code>touch build-arch-stamp
</code></pre>

<p> build-indep: deb-checkdir build-indep-stamp
-build-indep-stamp: patch-stamp build-arch-stamp
+build-indep-stamp: $(QUILT_STAMPFN) build-arch-stamp</p>

<pre><code>: 'Work around bug #478524'
set -e; if test '$(BUILD_DOCS)' = 1; \
then \
</code></pre>

<p>@@ -74,14 +85,17 @@</p>

<pre><code>fi
touch build-indep-stamp
</code></pre>

<p>-clean: deb-checkdir
+clean: deb-checkdir unpatch
+   dh_testdir
+   dh_clean
+   $(RM) patches</p>

<pre><code>$(MAKE) clean $(OPTS)
cd contrib/subtree; $(MAKE) clean $(OPTS)
</code></pre>

<ul>
<li>! test -e patch-stamp || \</li>
<li>  for i in `ls -1r debian/diff/<em>.diff debian/diff/</em>.patch \</li>
<li><pre><code>  2&gt;/dev/null || :`; do \
</code></pre></li>
<li><pre><code>patch -p1 -NR -r- &lt;$$i || test $$? = 1 || exit 1; \
</code></pre></li>
<li>  done
+#  ! test -e patch-stamp || \
+#    for i in <code>ls -1r debian/diff/*.diff debian/diff/*.patch \
+#        2&gt;/dev/null || :</code>; do \
+#      patch -p1 -NR -r- &lt;$$i || test $$? = 1 || exit 1; \
+#    done
rm -rf &lsquo;$(TMP)&rsquo;
rm -f patch-stamp build-arch-stamp build-indep-stamp
rm -rf &lsquo;$(GIT)&rsquo; &lsquo;$(GIT)&rsquo;-doc &lsquo;$(GIT)&rsquo;-arch &lsquo;$(GIT)&rsquo;-cvs
{% endcodeblock %}</li>
</ul>


<h2>Neuerzeugung des Paketes</h2>

<p>Nun kann versucht werden, das Paket neu zu erzeugen mit <code>dpkg-buildpackage</code>.
Erwartungsgemäß scheitert die Erzeugung, weil einige Patches nicht sauber
durchlaufen. Korrigiert habe ich das so:</p>

<ul>
<li>In &ldquo;debian/patches/series&rdquo; folgende Patches deaktiviert:

<ul>
<li>0005-gitk-use-symbolic-font-names-sans-and-monospace-when-.diff</li>
<li>0006-gitk-Skip-over-AUTHOR-COMMIT_DATE-when-searching-all-.diff</li>
</ul>
</li>
<li>Bei allen übrigen Patches:

<ul>
<li><code>quilt push -f</code></li>
<li><code>quilt refresh</code></li>
<li><code>dpkg-buildpackage</code></li>
<li>&hellip; so oft wiederholen, bis es durchläuft</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Subtree (1/2)]]></title>
    <link href="http://uli-heller.github.com/blog/2013/04/12/git-subtree/"/>
    <updated>2013-04-12T07:14:00+02:00</updated>
    <id>http://uli-heller.github.com/blog/2013/04/12/git-subtree</id>
    <content type="html"><![CDATA[<h1>Git Subtree &ndash; Neues DEB-Paket bereitstellen</h1>

<h2>Einleitung</h2>

<p>Kurze Erklärung: Warum will ich&rsquo;s verwenden? Warum kann ich&rsquo;s nicht
direkt verwenden?</p>

<p>Leider ist <code>git subtree</code> in den von mir verwendeten Pakete standardmässig
nicht aktiv:</p>

<p>{% codeblock git-subtree fehlt lang:sh %}
$ git subtree
git: &lsquo;subtree&rsquo; is not a git command. See &lsquo;git &mdash;help&rsquo;.
{% endcodeblock %}</p>

<p>Entweder wir aktivieren es manuell oder wir bauen neue Pakete, bei denen <code>git subtree</code> aktiviert ist.</p>

<h2>Manuelles Aktivieren von Git Subtree</h2>

<p>{% codeblock git-subtree manuell installieren lang:sh %}
$ git subtree
git: &lsquo;subtree&rsquo; is not a git command. See &lsquo;git &mdash;help&rsquo;.
$ sudo cp /usr/share/doc/git/contrib/subtree/git-subtree.sh /usr/lib/git-core/git-subtree
$ sudo chmod +x  /usr/lib/git-core/git-subtree
$ git subtree
usage: git subtree add   &mdash;prefix=<prefix> <commit>
   or: git subtree add   &mdash;prefix=<prefix> <repository> <commit>
   or: git subtree merge &mdash;prefix=<prefix> <commit>
&hellip;
{% endcodeblock %}</p>

<p>Nachteil beim manuellen Aktivieren: Es gibt keine Online-Dokumentation,
d.h. <code>git help subtree</code> läuft in&rsquo;s Leere.</p>

<h2>Erzeugung neuer DEB-Pakete</h2>

<ul>
<li>Ausgangspunkt: Build-Verzeichnis für Git-1.8.2.1 liegt vor, d.h. ich
kann mit <code>dpkg-buildpackage</code> neue DEB-Pakete erzeugen</li>
<li>Sichtung: Wie funktioniert die Einbindung von &ldquo;subtree&rdquo;?

<ul>
<li>Die Implementierung liegt unter contrib/subtree</li>
<li>Eine Einspielanleitung gibt&rsquo;s dort auch</li>
<li>Diese müssen wir &ldquo;eigentlich&rdquo; nur noch in debian/rules einbauen
und fertig!</li>
</ul>
</li>
<li>Also: Änderungen an debian/changelog und debian/rules durchführen und
los geht&rsquo;s mit <code>dpkg-buildpackage</code> (&hellip; das dauert)</li>
<li>Sichtung: Ist git-subtree in den erstellten Paketen enthalten?

<ul>
<li><code>dpkg-deb -c git_1.8.2.1*deb|grep git-core/git-subtree</code></li>
</ul>
</li>
</ul>


<h3>Probleme</h3>

<h4>Falscher Installationspfad</h4>

<ul>
<li>Verwendet wird: /build/git/git-1.8.2.1/debian/git/usr/libexec/git-core</li>
<li>Richtig wäre:  /build/git/git-1.8.2.1/debian/git/usr/lib/git-core</li>
<li>Korrektur durch: Setzen von libexecdir in debian/rules</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub - Downloads]]></title>
    <link href="http://uli-heller.github.com/blog/2013/02/12/github-downloads/"/>
    <updated>2013-02-12T08:00:00+01:00</updated>
    <id>http://uli-heller.github.com/blog/2013/02/12/github-downloads</id>
    <content type="html"><![CDATA[<h1>GitHub &ndash; Anlegen eines Download-Bereichs</h1>

<p>Ende 2012 sorgte GitHub bei mir für einige Verwirrung, indem
die Möglichkeit des Bereitstellens von Download-Dateien abgeschafft wurde.</p>

<p>Als Notbehelf verwende ich aktuell einfach einen speziellen Zweig namens
&ldquo;downloads&rdquo; und lege dann die runterladbaren Dateien darin ab.</p>

<h2>Download-Zweig anlegen</h2>

<p>Den Download-Zweig legt man grob so an:</p>

<ul>
<li>Sicherstellen: Alle Dateien sind gespeichert in Git! (mittels: <code>git status</code>)</li>
<li>Neuen Zweig anlegen und leeren</li>
<li>README.txt erzeugen mit einer kurzen Beschreibung</li>
<li>README.txt in Git abspeichern</li>
<li>Zweig nach GitHub hochschieben</li>
</ul>


<p>{% codeblock Download-Zweig anlegen lang:sh %}
$ git checkout master
$ git status</p>

<h1>On branch master</h1>

<p>nothing to commit, working directory clean
$ git checkout &mdash;orphan downloads
$ git rm -rf .
$ jmacs README.txt # Enter description of the branch
$ git add README.txt
$ git commit -m &ldquo;Created branch: downloads&rdquo;
$ git push &mdash;set-upstream origin downloads
$ git checkout master
{% endcodeblock %}</p>

<h2>Dateien ablegen</h2>

<p>{% codeblock Dateien ablegen lang:sh %}
$ git checkout downloads
$ cp &hellip;/my-project-0.1-bin.tar.xz .
$ cp &hellip;/my-project-0.1-bin.zip .
$ git add my-project-0.1-bin.tar.xz my-project-0.1-bin.zip
$ git commit -m &ldquo;Added downloads of version 0.1&rdquo; .
$ git push # might take some time depending on your internet connection bandwidth
$ git checkout master # switch back to master
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
