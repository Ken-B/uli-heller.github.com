<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Packaging | Was ich so treibe...]]></title>
  <link href="http://uli-heller.github.com/blog/categories/packaging/atom.xml" rel="self"/>
  <link href="http://uli-heller.github.com/"/>
  <updated>2013-08-07T10:00:49+02:00</updated>
  <id>http://uli-heller.github.com/</id>
  <author>
    <name><![CDATA[Uli Heller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Abhängigkeiten für Debian-Paketbau installieren]]></title>
    <link href="http://uli-heller.github.com/blog/2013/06/01/build-dependencies/"/>
    <updated>2013-06-01T17:30:00+02:00</updated>
    <id>http://uli-heller.github.com/blog/2013/06/01/build-dependencies</id>
    <content type="html"><![CDATA[<p>Normalerweise spiele ich alle zum Bau eines Debian-Paketes notwendigen
Programme ein mittels <code>sudo apt-get build-dep {paketname}</code>. Blöderweise
geht das nicht, wenn das zu bauende Paket nicht aus einem
Repository &ldquo;geladen&rdquo; werden soll, so zum Beispiel wenn ich nur die
Quelltexte und die DSC-Datei des Paketes vorliegen habe.</p>

<p>Nachfolgend beschreibe ich am Beispiel von MUFFIN, wie man die Pakete
dennoch ohne allzuviel Tipparbeit installieren kann.</p>

<!-- more -->


<h2>Quelltexte herunterladen</h2>

<p>Beispielsweise von <a href="https://github.com/linuxmint/muffin/archive/1.8.2.tar.gz">https://github.com/linuxmint/muffin/archive/1.8.2.tar.gz</a></p>

<h2>Quelltexte entpacken</h2>

<ul>
<li><code>gzip -cd muffin-1.8.2.tar.gz|tar xf -</code></li>
<li><code>cd muffin-1.8.2</code></li>
</ul>


<h2>Abhängigkeiten anzeigen</h2>

<ul>
<li><code>dpkg-buildpackage</code></li>
</ul>


<p>&hellip; liefert eine Ausgabe der Art:</p>

<p><code>
...
dpkg-checkbuilddeps: Unmet build dependencies: debhelper (&gt;= 8) dh-autoreconf intltool (&gt;= 0.34.90) libgtk-3-dev (&gt;= 3.0.8-1~) libcanberra-gtk3-dev gobject-introspection (&gt;= 0.9.12-5~) libgirepository1.0-dev (&gt;= 0.9.12) libjson-glib-dev (&gt;= 0.13.2-1~) libclutter-1.0-dev (&gt;= 1.7.5) libpango1.0-dev (&gt;= 1.2.0) libgconf2-dev (&gt;= 2.6.1-2) libglib2.0-dev (&gt;= 2.6.0) libstartup-notification0-dev (&gt;= 0.7) libxcomposite-dev (&gt;= 1:0.2) libxfixes-dev libxrender-dev libxdamage-dev libxcursor-dev libxinerama-dev libxext-dev libxrandr-dev gnome-doc-utils (&gt;= 0.8) gnome-pkg-tools (&gt;= 0.10) gsettings-desktop-schemas-dev (&gt;= 3.3.0)
</code></p>

<h2>Abhängigkeiten installieren</h2>

<pre><code>dpkg-checkbuilddeps 2&gt;&amp;1 \
| sed                    \
  -e "s/^.*: //"         \
  -e "s/([^(]*)//g"      \
|sudo xargs apt-get install -y
</code></pre>

<h2>Paket bauen</h2>

<ul>
<li><code>dpkg-buildpackage</code></li>
</ul>


<p>&hellip; läuft nun durch!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dovecot: Aktualisierung mit Pigeonhole]]></title>
    <link href="http://uli-heller.github.com/blog/2013/04/19/pigeonhole/"/>
    <updated>2013-04-19T06:00:00+02:00</updated>
    <id>http://uli-heller.github.com/blog/2013/04/19/pigeonhole</id>
    <content type="html"><![CDATA[<h1>Dovecot: Aktualisierung des Debian-Paketes mit Pigeonhole</h1>

<p>Gestern oder heute wurde die Version 2.2.1 von Dovecot veröffentlicht.
Natürlich habe ich gleich versucht, mein Debian-Paket zu aktualisieren:</p>

<ul>
<li><code>cd .../dovecot-2.2.0</code></li>
<li><code>uupdate -u ../dovecot-2.2.1.tar.gz</code></li>
<li><code>cd ../dovecot-2.2.1</code></li>
<li><code>dpkg-buildpackage</code></li>
</ul>


<p>Dummerweise klappt das nicht! Pigeonhole scheint zu fehlen, so dass
schon die Anwendung der Quilt-Patches scheitert.</p>

<!-- more -->


<p>Mein Dovecot-Debian-Paket beinhaltet u.a. auch Pigeonhole.
Pigeonhole wird separat zum Herunterladen angeboten, im Debian-Paket
erscheint es aber als Patch unterhalb von debian/patches. Das ist ein
gewisses Problem, weil man das heruntergeladene Paket dann immer erst
in einen Patch umwandeln muß.</p>

<p>Deshalb mein Ziel: Ich würde das Pigeonhole-Paket gerne möglichst
unverändert in&rsquo;s Dovecot-Debian-Paket einbinden!</p>

<!-- more -->


<h2>Ausgangspunkt</h2>

<p>Ausgangspunkt ist das bestehende Dovecot-Debian-Paket in der Version 2.2.0.
Es kann mit <code>dpkg-buildpackage</code> neu erzeugt werden.</p>

<p>Wir wissen, dass es eine neue Version 2.2.1 von Dovecot gibt. Die haben wir
auch schon heruntergeladen. Von Pigeonhole gibt es keine neue Version, also
verwenden wir die alte einfach weiter.</p>

<h2>Pigeonhole vorbereiten</h2>

<ul>
<li><code>cp dovecot_2.2.0.orig-pigeonhole.tar.bz2  dovecot_2.2.1.orig-pigeonhole.tar.bz2</code></li>
</ul>


<h2>Dovecot vorbereiten</h2>

<ul>
<li><code>cd .../dovecot-2.2.0</code></li>
<li><code>uupdate -u ../dovecot-2.2.1.tar.gz</code></li>
<li><code>cd ../dovecot-2.2.1</code></li>
</ul>


<h2>Dovecot/Pigeonhole sichten</h2>

<p>Prüfen: Gibt es innerhalb des Dovecot-Verzeichnisses nun ein Verzeichnis für
Pigeonhole? &ndash;> Nein!</p>

<h2>Pigeonhole auspacken und umbenennen</h2>

<ul>
<li><code>bzip2 -cd ../dovecot_2.2.1.orig-pigeonhole.tar.bz2|tar xf -</code></li>
<li><code>mv dovecot-2-2-pigeonhole-70f0b7140939 pigeonhole</code></li>
</ul>


<h2>Dovecot neu erzeugen</h2>

<ul>
<li><code>dpkg-buildpackage</code></li>
</ul>


<p>Nun klappt&rsquo;s!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pigeonhole für für mein Debian-Paket von Dovecot]]></title>
    <link href="http://uli-heller.github.com/blog/2013/04/15/pigeonhole/"/>
    <updated>2013-04-15T06:00:00+02:00</updated>
    <id>http://uli-heller.github.com/blog/2013/04/15/pigeonhole</id>
    <content type="html"><![CDATA[<h1>Dovecot: Einbinden von Pigeonhole</h1>

<p>Mein Dovecot-Debian-Paket beinhaltet u.a. auch Pigeonhole.
Pigeonhole wird separat zum Herunterladen angeboten, im Debian-Paket
erscheint es aber als Patch unterhalb von debian/patches. Das ist ein
gewisses Problem, weil man das heruntergeladene Paket dann immer erst
in einen Patch umwandeln muß.</p>

<p>Deshalb mein Ziel: Ich würde das Pigeonhole-Paket gerne möglichst
unverändert in&rsquo;s Dovecot-Debian-Paket einbinden!</p>

<!-- more -->


<h2>Ausgangspunkt</h2>

<p>Ausgangspunkt ist das bestehende Dovecot-Debian-Paket. Es kann mit
<code>dpkg-buildpackage</code> neu erzeugt werden.</p>

<h2>Pakete herunterladen</h2>

<ul>
<li><a href="http://dovecot.org/releases/2.2/dovecot-2.2.0.tar.gz">Dovecot-2.2.0</a></li>
<li><a href="http://hg.rename-it.nl/dovecot-2.2-pigeonhole/archive/tip.tar.bz2">Pigeonhole für Dovecot-2.2.0</a></li>
</ul>


<h2>Dovecot-Debian-Paket anpassen auf neue Version</h2>

<ul>
<li><code>uupdate -u ../dovecot-2.2.0.tar.gz -v 2:2.2.0</code></li>
<li><code>cd ../dovecot-2.2.0</code></li>
</ul>


<h2>Verweise auf Pigeonhole-Patch entfernen</h2>

<ul>
<li><code>cd ./dovecot-2.2.0</code></li>
<li><code>rm debian/patches/pigeonhole.patch</code></li>
<li><code>sed -i "s/pigeonhole.patch/#pigeonhole.patch/" debian/patches/series</code></li>
</ul>


<h2>Verwendung des Pigeonhole-Paketes vorbereiten</h2>

<ul>
<li><code>cp dovecot-2-2-pigeonhole-70f0b7140939.tar.bz2 dovecot_2.2.0.orig-pigeonhole.tar.bz2</code></li>
<li><code>cd ./dovecot-2.2.0</code></li>
<li><code>mkdir pigeonhole</code></li>
<li><code>tar -C pigeonhole --strip-components=1 -jxf ../dovecot_2.2.0.orig-pigeonhole.tar.bz2</code></li>
</ul>


<h2>Paket neu erzeugen</h2>

<ul>
<li><code>cd ./dovecot-2.2.0</code></li>
<li><code>dpkg-buildpackage</code></li>
</ul>


<h2>Links</h2>

<ul>
<li><a href="http://raphaelhertzog.com/2010/09/07/how-to-use-multiple-upstream-tarballs-in-debian-source-packages/">http://raphaelhertzog.com/2010/09/07/how-to-use-multiple-upstream-tarballs-in-debian-source-packages/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quilt für mein Debian-Paket von Git]]></title>
    <link href="http://uli-heller.github.com/blog/2013/04/14/quilt-fuer-gitdeb/"/>
    <updated>2013-04-14T12:00:00+02:00</updated>
    <id>http://uli-heller.github.com/blog/2013/04/14/quilt-fuer-gitdeb</id>
    <content type="html"><![CDATA[<h1>Quilt: Umstellung der Patchverwaltung meines Git-Debian-Paketes auf Quilt</h1>

<p>Mein Git-Debian-Paket verwendet bislang keine vernünftige Patchverwaltung.
Stattdessen werden bei der Erzeugung des Paketes einfach alle Patches
unterhalb von debian/diff der Reihe nach angewandt. Blöderweise fallen so
gescheiterte Patchanwendungen nicht auf, außerdem werden im Source-Paket
teilweise Original-Dateien modifiziert &ndash; vermutlich weil einige Patches
nicht sauber zurückgerollt werden.</p>

<p>Also: Ich will Quilt haben!</p>

<!-- more -->


<h2>Sichtung des Debian-Paketes von Subversion</h2>

<ul>
<li>Patches liegen unter debian/patches und nicht unter debian/diff</li>
<li>Es gibt eine Datei namens debian/patches/series, die alle Patches auflistet</li>
<li>In debian/rules sind einige Änderungen vorzunehmen</li>
</ul>


<p>Die ersten beiden Punkte sind schnell erledigt:</p>

<ul>
<li><code>mv debian/diff debian/patches</code></li>
<li><code>cd debian/patches; (ls|grep -v series) &gt;series</code></li>
</ul>


<p>Bleibt noch die Anpassung von debian/rules!</p>

<h2>Anpassungen an &ldquo;debian/rules&rdquo;</h2>

<p>An der Datei &ldquo;debian/rules&rdquo; müssen qualitativ diese Änderungen vorgenommen
werden:</p>

<ul>
<li>Einbinden der Datei /usr/share/quilt/quilt.make</li>
<li>Ziele &ldquo;patch&rdquo; und &ldquo;patch-stamp&rdquo; entfernen</li>
<li>Ziele &ldquo;debian/stamp-autogen&rdquo; und &ldquo;debian/stamp-configure&rdquo; neu aufnehmen
Bei &ldquo;debian/stamp-configure&rdquo; wird ein Verweis auf &ldquo;patches&rdquo; angelegt</li>
<li>Verweise auf &ldquo;patch-stamp&rdquo; ersetzen durch &ldquo;$(QUILT_STAMPFN)&rdquo;</li>
<li>Im Ziel &ldquo;clean&rdquo; diese Änderungen vornehmen:

<ul>
<li>Neue Abhängigkeit zu &ldquo;unpatch&rdquo; festlegen</li>
<li>Neuer Aufruf: dh_testdir</li>
<li>Neuer Aufruf: dh_clean</li>
<li>Verweis auf &ldquo;patches&rdquo; löschen</li>
<li>Manuelle Logik zum Zurücknehmen der Patches entfernen</li>
</ul>
</li>
</ul>


<p>Die Änderungen sind im nachfolgenden DIFF zusammengefasst.</p>

<p>{% codeblock Anpassungen an debian/rules lang:diff %}
&mdash;&ndash; ../git-1.8.2.1_ok/debian/rules  2013-04-13 19:55:00.061153212 +0200
+++ debian/rules    2013-04-14 09:36:24.782564149 +0200
@@ -37,19 +37,30 @@
 TMP =$(shell pwd)/tmp
 GIT =$(shell pwd)/debian/git</p>

<p>-patch: deb-checkdir patch-stamp
-patch-stamp:
&ndash;   cp gitk-git/gitk gitk-git/gitk.uli.orig
&ndash;   for i in <code>ls -1 debian/diff/*.diff debian/diff/*.patch \
-       2&gt;/dev/null || :</code>; do \
&ndash;     patch -p1 -N -r- &lt;$$i || test $$? = 1 || exit 1; \
&ndash;   done
&ndash;   touch patch-stamp
+include /usr/share/quilt/quilt.make
+
+debian/stamp-autogen:  $(QUILT_STAMPFN)
+   $(DONT_BE_ROOT)
+   ./autogen.sh
+   touch $@
+
+debian/stamp-configure:    $(QUILT_STAMPFN) debian/stamp-autogen
+   dh_testdir
+   test -e patches || ln -s debian/patches patches
+
+#patch: deb-checkdir patch-stamp
+#patch-stamp:
+#  cp gitk-git/gitk gitk-git/gitk.uli.orig
+#  for i in <code>ls -1 debian/diff/*.diff debian/diff/*.patch \
+#      2&gt;/dev/null || :</code>; do \
+#    patch -p1 -N -r- &lt;$$i || test $$? = 1 || exit 1; \
+#  done
+#  touch patch-stamp</p>

<p> build: build-arch build-indep</p>

<p> build-arch: deb-checkdir build-arch-stamp
-build-arch-stamp: patch-stamp
+build-arch-stamp: $(QUILT_STAMPFN)</p>

<pre><code>-$(CC) -v
DESTDIR='$(GIT)' $(MAKE) all $(OPTS)
cd contrib/subtree; DESTDIR='$(GIT)' $(MAKE) all $(OPTS)
</code></pre>

<p>@@ -66,7 +77,7 @@</p>

<pre><code>touch build-arch-stamp
</code></pre>

<p> build-indep: deb-checkdir build-indep-stamp
-build-indep-stamp: patch-stamp build-arch-stamp
+build-indep-stamp: $(QUILT_STAMPFN) build-arch-stamp</p>

<pre><code>: 'Work around bug #478524'
set -e; if test '$(BUILD_DOCS)' = 1; \
then \
</code></pre>

<p>@@ -74,14 +85,17 @@</p>

<pre><code>fi
touch build-indep-stamp
</code></pre>

<p>-clean: deb-checkdir
+clean: deb-checkdir unpatch
+   dh_testdir
+   dh_clean
+   $(RM) patches</p>

<pre><code>$(MAKE) clean $(OPTS)
cd contrib/subtree; $(MAKE) clean $(OPTS)
</code></pre>

<ul>
<li>! test -e patch-stamp || \</li>
<li>  for i in `ls -1r debian/diff/<em>.diff debian/diff/</em>.patch \</li>
<li><pre><code>  2&gt;/dev/null || :`; do \
</code></pre></li>
<li><pre><code>patch -p1 -NR -r- &lt;$$i || test $$? = 1 || exit 1; \
</code></pre></li>
<li>  done
+#  ! test -e patch-stamp || \
+#    for i in <code>ls -1r debian/diff/*.diff debian/diff/*.patch \
+#        2&gt;/dev/null || :</code>; do \
+#      patch -p1 -NR -r- &lt;$$i || test $$? = 1 || exit 1; \
+#    done
rm -rf &lsquo;$(TMP)&rsquo;
rm -f patch-stamp build-arch-stamp build-indep-stamp
rm -rf &lsquo;$(GIT)&rsquo; &lsquo;$(GIT)&rsquo;-doc &lsquo;$(GIT)&rsquo;-arch &lsquo;$(GIT)&rsquo;-cvs
{% endcodeblock %}</li>
</ul>


<h2>Neuerzeugung des Paketes</h2>

<p>Nun kann versucht werden, das Paket neu zu erzeugen mit <code>dpkg-buildpackage</code>.
Erwartungsgemäß scheitert die Erzeugung, weil einige Patches nicht sauber
durchlaufen. Korrigiert habe ich das so:</p>

<ul>
<li>In &ldquo;debian/patches/series&rdquo; folgende Patches deaktiviert:

<ul>
<li>0005-gitk-use-symbolic-font-names-sans-and-monospace-when-.diff</li>
<li>0006-gitk-Skip-over-AUTHOR-COMMIT_DATE-when-searching-all-.diff</li>
</ul>
</li>
<li>Bei allen übrigen Patches:

<ul>
<li><code>quilt push -f</code></li>
<li><code>quilt refresh</code></li>
<li><code>dpkg-buildpackage</code></li>
<li>&hellip; so oft wiederholen, bis es durchläuft</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dovecot-2.2 - DEB-Paket erzeugen]]></title>
    <link href="http://uli-heller.github.com/blog/2013/03/11/dovecot/"/>
    <updated>2013-03-11T09:00:00+01:00</updated>
    <id>http://uli-heller.github.com/blog/2013/03/11/dovecot</id>
    <content type="html"><![CDATA[<h1>Ubuntu-Pakete aktualisieren &ndash; Dovecot</h1>

<p>Heute soll eine neue Version von Dovecot erzeugt werden.
Grob geht&rsquo;s so:</p>

<ul>
<li>Quellen der Standardversion von Ubuntu runterladen und kompilieren</li>
<li>Aktualisieren auf die gewünschte neue Version (2.2.rc2)</li>
<li>Neue Version kompilieren</li>
</ul>


<p>Mal sehen, ob&rsquo;s klappt wie vorgesehen!</p>

<!-- more -->


<h2>Standardversion von Ubuntu</h2>

<p>{% codeblock Standardversion herunterladen und bauen lang:sh %}</p>

<h1>Build-Verzeichnis anlegen und reinwechseln</h1>

<p>mkdir -p /build/dovecot
cd /build/dovecot</p>

<h1>Quellen zum Ubuntu-Paket runterladen &ndash; 2.0.19-0ubuntu2</h1>

<p>apt-get source dovecot</p>

<h1>Abhängigkeiten nachinstallieren</h1>

<p>sudo apt-get build-dep dovecot</p>

<h1>Ubuntu-Paket erzeugen</h1>

<p>cd dovecot-2.0.19
dpkg-buildpackage</p>

<h1>&hellip; läuft hoffentlich ohne Probleme durch</h1>

<p>quilt pop -a
{% endcodeblock %}</p>

<h2>Aktualisierung auf 2.2.rc2</h2>

<p>{% codeblock Aktualisierung auf 2.2.rc2 lang:sh %}</p>

<h1>In Build-Verzeichnis reinwechseln</h1>

<p>cd /build/dovecot</p>

<h1>Quellen zu Dovecot-2.2.rc1 runterladen</h1>

<p>wget <a href="http://syksy.dovecot.org/releases/2.2/rc/dovecot-2.2.rc2.tar.gz">http://syksy.dovecot.org/releases/2.2/rc/dovecot-2.2.rc2.tar.gz</a></p>

<h1>Erster Versuch&hellip;</h1>

<p>cd dovecot-2.0.19
uupdate -u ../dovecot-2.2.rc2.tar.gz</p>

<h1>&hellip; zeigt leider eine Fehlermeldung an:</h1>

<h1>uupdate: new version number not recognized from given filename</h1>

<h1>Please run uupdate with the -v option</h1>

<h1>Also nochmal&hellip;</h1>

<p>uupdate -u ../dovecot-2.2.rc2.tar.gz -v 2.2.rc2</p>

<h1>OK, keine Fehlermeldung.</h1>

<h1>Wechseln in&rsquo;s neue Verzeichnis und dann debian/changelog anpassen</h1>

<p>cd ../dovecot-2.2.rc2
jmacs debian/changelog # Details: Siehe nachfolgender DIFF</p>

<h1>Ubuntu-Paket erzeugen</h1>

<p>dpkg-buildpackage</p>

<h1>Mecker wg. fix-racey-restarts.patch</h1>

<h1>&ndash; Kein einziger Patch klappt</h1>

<h1>&ndash; Oft erscheint &lsquo;Reversed (or previously applied) patch detected!  Skipping patch.&rsquo;</h1>

<h1>&ndash;> Wir blenden den Patch aus</h1>

<p>quilt pop -a
jmacs debian/patches/series # Details: Siehe nachfolgender DIFF</p>

<h1>&hellip; noch ein paar Iterationen wie zuvor</h1>

<p>dpkg-buildpackage</p>

<h1>Scheitert nun ganz am Ende &ndash; pigeonhole passt nicht so richtig</h1>

<h1>&hellip; wir versuchen&rsquo;s mit dovecot-2.1-pigeonhole-0.3.3.tar.gz</h1>

<h1>&hellip; klappt auch nicht &ndash; gleicher Fehler!</h1>

<h1>&hellip; dann halt mit dovecot-2.2-pigeonhole-tip</h1>

<h1>&hellip; klappt besser, jetzt &ldquo;zickt&rdquo; noch DRAC</h1>

<h1>&hellip; läßt sich auch leicht korrigieren</h1>

<p>{% endcodeblock %}</p>

<p>{% codeblock Änderungen an debian/changelog lang:diff %}
diff -u debian/changelog~ debian/changelog
&mdash;&ndash; debian/changelog~   2013-03-11 09:09:19.000000000 +0100
+++ debian/changelog    2013-03-11 09:11:53.435109570 +0100
@@ -1,8 +1,8 @@
-dovecot (1:2.2.rc2-0ubuntu1) precise; urgency=low
+dovecot (1:2.2.rc2-0dp01~precise1) precise; urgency=low</p>

<ul>
<li><p> New upstream release</p></li>
<li><p>&mdash; Uli Heller <a href="&#109;&#x61;&#105;&#x6c;&#x74;&#111;&#58;&#x75;&#x6c;&#105;&#x40;&#x75;&#x62;&#x75;&#x6e;&#116;&#117;&#x31;&#x32;&#x30;&#x34;&#46;&#100;&#x61;&#x65;&#x6d;&#111;&#x6e;&#x73;&#45;&#112;&#x6f;&#x69;&#110;&#x74;&#46;&#99;&#x6f;&#x6d;">&#117;&#x6c;&#x69;&#x40;&#117;&#98;&#x75;&#110;&#x74;&#117;&#49;&#50;&#48;&#52;&#x2e;&#x64;&#x61;&#101;&#x6d;&#x6f;&#x6e;&#x73;&#x2d;&#x70;&#111;&#x69;&#110;&#116;&#46;&#x63;&#111;&#109;</a>  Mon, 11 Mar 2013 09:09:19 +0100</p></li>
<li>&mdash; Uli Heller <a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#111;&#58;&#117;&#x6c;&#105;&#x2e;&#x68;&#101;&#108;&#108;&#101;&#114;&#x40;&#x64;&#x61;&#x65;&#109;&#111;&#x6e;&#x73;&#45;&#112;&#x6f;&#105;&#110;&#x74;&#x2e;&#x63;&#x6f;&#109;">&#117;&#x6c;&#105;&#x2e;&#104;&#101;&#108;&#x6c;&#x65;&#114;&#x40;&#x64;&#97;&#x65;&#109;&#x6f;&#110;&#115;&#45;&#x70;&#x6f;&#105;&#x6e;&#x74;&#46;&#x63;&#111;&#x6d;</a>  Mon, 11 Mar 2013 09:09:19 +0100</li>
</ul>


<p> dovecot (1:2.0.19-0ubuntu2) precise-proposed; urgency=low</p>

<p>{% endcodeblock %}</p>

<p>{% codeblock Änderungen an debian/patches/series lang:diff %}
diff -u debian/patches/series~ debian/patches/series
&mdash;&ndash; debian/patches/series~  2012-06-28 23:34:08.000000000 +0200
+++ debian/patches/series   2013-03-11 09:18:30.167126242 +0100
@@ -2,5 +2,5 @@
 dovecot-drac.patch
 split-protocols.patch
 fix-mail_plugin_dir-default.patch
-fix-racey-restarts.patch
+#fix-racey-restarts.patch
 bug-1018579.patch
{% endcodeblock %}</p>

<h2>Pigeonhole</h2>

<p>Pigeonhole wird seperat von Dovecot entwickelt. Ich habe die neuen Versionen heruntergeladen von
<a href="http://pigeonhole.dovecot.org/">http://pigeonhole.dovecot.org/</a>.</p>

<p>Für die DEB-Erstellung muß dann noch ein Patch dafür erzeugt werden. Das geht am besten so:</p>

<ul>
<li>Temporäre Verzeichnisse anlegen: <code>mkdir -p tmp/a tmp/b</code></li>
<li>Wechseln in&rsquo;s Verzeichnis b: <code>cd tmp/b</code></li>
<li>Pigeonhole auspacken: <code>gzip -cd .../dovecot-2-2-pigeonhole-b75b00760b86.tar.gz|tar xf -</code></li>
<li>Verzeichnis umbenennen: <code>mv dove* pigeonhole</code></li>
<li>Patch erstellen: <code>cd ..; diff -Nur a b &gt;pigeonhole.patch</code></li>
</ul>


<h2>Diff</h2>

<p>{% include_code ubuntu/dovecot_20_22.diff %}</p>
]]></content>
  </entry>
  
</feed>
