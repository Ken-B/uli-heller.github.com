<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pakete | Was ich so treibe...]]></title>
  <link href="http://uli-heller.github.com/blog/categories/pakete/atom.xml" rel="self"/>
  <link href="http://uli-heller.github.com/"/>
  <updated>2013-08-07T10:00:49+02:00</updated>
  <id>http://uli-heller.github.com/</id>
  <author>
    <name><![CDATA[Uli Heller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ubuntu-Debian-Pakete mit LXC erzeugen]]></title>
    <link href="http://uli-heller.github.com/blog/2013/05/12/lxc-ubuntu-build/"/>
    <updated>2013-05-12T10:00:00+02:00</updated>
    <id>http://uli-heller.github.com/blog/2013/05/12/lxc-ubuntu-build</id>
    <content type="html"><![CDATA[<h2>Installation von LXC</h2>

<p>{% codeblock Installation von LXC %}
sudo apt-get install lxc
{% endcodeblock %}</p>

<h2>Container-Partition /lxc</h2>

<p>Dieser Abschnitt kann optional ausgeführt werden.
Voraussetzung ist, dass es eine Volume Group namens &ldquo;datavg&rdquo;
gibt und dass diese über mindestens 10 GB freien Speicherplatz
verfügt.</p>

<h3>Partition anlegen</h3>

<p>{% codeblock %}
sudo lvcreate -n lxclv -L10G datavg
sudo mkfs.btrfs /dev/datavg/lxclv
{% endcodeblock %}</p>

<h3>Partition einbinden</h3>

<p>{% codeblock %}
sudo -s
mkdir /lxc
echo &ldquo;/dev/datavg/lxclv /lxc btrfs defaults 0 3&rdquo; >>/etc/fstab
mount /lxc
rmdir /var/lib/lxc
ln -s /lxc/lib /var/lib/lxc
rm -rf /var/cache/lxc
ln -s /lxc/cache /var/cache/lxc
{% endcodeblock %}</p>

<!--
Verwendung vom lokalen Apt-Cacher-Ng
------------------------------------

Datei /etc/default/lxc editieren:

{% codeblock %}
MIRROR="http://127.0.0.1:3142/archive.ubuntu.com/ubuntu"
{% endcodeblock %}

... funktioniert nicht, es werden viele Pakete als "nicht verifizierbar" ausgewiesen.
-->


<h2>Erstellen von Containern</h2>

<h3>12.04, 32bit</h3>

<p>{% codeblock %}
sudo lxc-create -t ubuntu -n ubuntu1204-32-build &mdash; -r precise -a i386
{% endcodeblock %}</p>

<p>Das Komando liefert typischerweise Ausgaben dieser Art:</p>

<p>{% codeblock %}
$ sudo lxc-create -t ubuntu -n ubuntu1204-32 &mdash; -r precise -a i386
[sudo] password for uli:</p>

<p>No config file specified, using the default config
debootstrap ist /usr/sbin/debootstrap
Checking cache download in /var/cache/lxc/precise/rootfs-i386 &hellip;
Copy /var/cache/lxc/precise/rootfs-i386 to /var/lib/lxc/ubuntu1204-32/rootfs &hellip;
Copying rootfs to /var/lib/lxc/ubuntu1204-32/rootfs &hellip;</p>

<h1>#</h1>

<h1>The default user is &lsquo;ubuntu&rsquo; with password &lsquo;ubuntu&rsquo;!</h1>

<h1>Use the &lsquo;sudo&rsquo; command to run tasks as root in the container.</h1>

<h1>#</h1>

<p>&lsquo;ubuntu&rsquo; template installed
&lsquo;ubuntu1204-32&rsquo; created
{% endcodeblock %}</p>

<h3>12.04, 64bit</h3>

<p>64-bit Container können nur erstellt werden, wenn das Basissystem auch ein 64-bit-System ist!</p>

<p>{% codeblock %}
sudo lxc-create -t ubuntu -n ubuntu1204-64-build &mdash; -r precise -a amd64
{% endcodeblock %}</p>

<h2>Arbeit mit Containern</h2>

<ul>
<li>Anmelden

<ul>
<li>Benutzer: &ldquo;ubuntu&rdquo;</li>
<li>Kennwort: &ldquo;ubuntu&rdquo;</li>
</ul>
</li>
<li>Netzwerk

<ul>
<li>IP-Adressen: Aus dem Adressbereich 10.0.3/24</li>
<li>NAT: Funktioniert &ndash; @ping google.com@</li>
<li>SSH vom Host in den Container: Funktioniert &ndash; @ssh ubuntu@10.0.3.250@</li>
</ul>
</li>
</ul>


<h2>Anpassung der Container</h2>

<h3>Verwenden des Apt-Cacher-Ng vom Host-System</h3>

<p>Erstellen von /etc/apt/apt.conf.d/01proxy:</p>

<p>{% codeblock /etc/apt/apt.conf.d/01proxy %}
Acquire::<a href="http::Proxy">http::Proxy</a> &ldquo;<a href="http://10.0.3.1:3142">http://10.0.3.1:3142</a>&rdquo;;
{% endcodeblock %}</p>

<h3>Installation von JOE/JMACS</h3>

<p>{% codeblock %}
sudo apt-get install joe
{% endcodeblock %}</p>

<h3>Paketquellen ergänzen um Source-Repositories</h3>

<p>{% codeblock /etc/apt/sources.list lang:diff %}
diff -u sources.list.orig sources.list
&mdash;&ndash; sources.list.orig   2012-09-30 09:41:15.000000000 +0200
+++ sources.list    2013-05-12 18:27:29.615640758 +0200
@@ -1,3 +1,6 @@
 deb <a href="http://archive.ubuntu.com/ubuntu">http://archive.ubuntu.com/ubuntu</a> precise main restricted universe multiverse
+deb-src <a href="http://archive.ubuntu.com/ubuntu">http://archive.ubuntu.com/ubuntu</a> precise main restricted universe multiverse
 deb <a href="http://archive.ubuntu.com/ubuntu">http://archive.ubuntu.com/ubuntu</a> precise-updates main restricted universe multiverse
+deb-src <a href="http://archive.ubuntu.com/ubuntu">http://archive.ubuntu.com/ubuntu</a> precise-updates main restricted universe multiverse
 deb <a href="http://security.ubuntu.com/ubuntu">http://security.ubuntu.com/ubuntu</a> precise-security main restricted universe multiverse
+deb-src <a href="http://security.ubuntu.com/ubuntu">http://security.ubuntu.com/ubuntu</a> precise-security main restricted universe multiverse
{% endcodeblock %}</p>

<h3>Aktualisierung auf den neuesten Stand</h3>

<p>{% codeblock %}
sudo apt-get update
sudo apt-get upgrade
sudo apt-get clean
{% endcodeblock %}</p>

<h2>Build-Tools einspielen</h2>

<p>{% codeblock %}
sudo apt-get update
sudo apt-get install build-essential fakeroot dpkg-dev devscripts
sudo apt-get install autotools-dev debhelper pkg-config
sudo apt-get install dh-autoreconf
sudo apt-get clean
{% endcodeblock %}</p>

<h2>GPG-Schlüssel übernehmen</h2>

<p>Dieser Abschnitt ist optional. Er wird nur benötigt, um signierte
DEB-Pakete zu erzeugen!</p>

<p>Auf dem bestehenden Build-System wird der GPG-Schlüssel exportiert:</p>

<p>{% codeblock GPG-Schlüssel exportieren %}
gpg &mdash;export-secret-keys >gpg.keys
{% endcodeblock %}</p>

<p>Auf dem neuen LXC-Build-System wird der GPG-Schlüssel importiert:</p>

<p>{% codeblock GPG-Schlüssel importieren %}
gpg &mdash;import &lt;gpg.keys
{% endcodeblock %}</p>

<h2>Durchführen eines Builds</h2>

<h3>nginx</h3>

<p>{% codeblock %}
mkdir nginx
cd nginx
apt-get source nginx
sudo apt-get build-dep nginx
cd nginx-1.1.19
dpkg-buildpackage
{% endcodeblock %}</p>

<h3>libseccomp</h3>

<p>{% codeblock %}</p>

<h1>Kopieren der nachfolgenden Dateien:</h1>

<h1>libseccomp_0.1.0-1dp01~precise2.debian.tar.gz</h1>

<h1>libseccomp_0.1.0-1dp01~precise2.dsc</h1>

<h1>libseccomp_0.1.0.orig.tar.gz</h1>

<p>dpkg-source -x  libseccomp_0.1.0-1dp01~precise2.dsc
cd libseccomp-0.1.0
dpkg-buildpackage
{% endcodeblock %}</p>

<h3>lxc</h3>

<p>&hellip; läuft analog zu &ldquo;libseccomp&rdquo;</p>

<h2>Sichern und Rückspielen von Containern</h2>

<h3>Sichern</h3>

<p>{% codeblock %}
cd /lxc
sudo tar -cvjpf /backups/lxc/20121119.tar.bz2 .
{% endcodeblock %}</p>

<h3>Rückspielen</h3>

<p>{% codeblock %}
cd /lxc
sudo tar -xvjpf /backups/lxc/20121119.tar.bz2
{% endcodeblock %}</p>

<h2>Probleme</h2>

<h3>Offene Punkte</h3>

<h4>Wie sorgt man dafür, dass ein Container nur über ein Host-Only-Netzwerk erreichbar ist?</h4>

<h3>Erledigte Punkte</h3>

<h4>Verwendung des Apt-Cacher-Ng durch einen Container</h4>

<p>&hellip; geht wie üblich durch /etc/apt/apt.conf.d/01proxy innerhalb des Containers</p>

<h4>Wie übernimmt man einen Container auf ein anderes System?</h4>

<p>&hellip; durch Sichern und Rückspielen.</p>

<h2>Links</h2>

<ul>
<li><a href="https://help.ubuntu.com/12.04/serverguide/lxc.html">Ubuntu 12.04 Server Guide</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
