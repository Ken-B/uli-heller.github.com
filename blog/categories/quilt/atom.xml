<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Quilt | Was ich so treibe...]]></title>
  <link href="http://uli-heller.github.com/blog/categories/quilt/atom.xml" rel="self"/>
  <link href="http://uli-heller.github.com/"/>
  <updated>2013-08-07T10:00:49+02:00</updated>
  <id>http://uli-heller.github.com/</id>
  <author>
    <name><![CDATA[Uli Heller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quilt für mein Debian-Paket von Git]]></title>
    <link href="http://uli-heller.github.com/blog/2013/04/14/quilt-fuer-gitdeb/"/>
    <updated>2013-04-14T12:00:00+02:00</updated>
    <id>http://uli-heller.github.com/blog/2013/04/14/quilt-fuer-gitdeb</id>
    <content type="html"><![CDATA[<h1>Quilt: Umstellung der Patchverwaltung meines Git-Debian-Paketes auf Quilt</h1>

<p>Mein Git-Debian-Paket verwendet bislang keine vernünftige Patchverwaltung.
Stattdessen werden bei der Erzeugung des Paketes einfach alle Patches
unterhalb von debian/diff der Reihe nach angewandt. Blöderweise fallen so
gescheiterte Patchanwendungen nicht auf, außerdem werden im Source-Paket
teilweise Original-Dateien modifiziert &ndash; vermutlich weil einige Patches
nicht sauber zurückgerollt werden.</p>

<p>Also: Ich will Quilt haben!</p>

<!-- more -->


<h2>Sichtung des Debian-Paketes von Subversion</h2>

<ul>
<li>Patches liegen unter debian/patches und nicht unter debian/diff</li>
<li>Es gibt eine Datei namens debian/patches/series, die alle Patches auflistet</li>
<li>In debian/rules sind einige Änderungen vorzunehmen</li>
</ul>


<p>Die ersten beiden Punkte sind schnell erledigt:</p>

<ul>
<li><code>mv debian/diff debian/patches</code></li>
<li><code>cd debian/patches; (ls|grep -v series) &gt;series</code></li>
</ul>


<p>Bleibt noch die Anpassung von debian/rules!</p>

<h2>Anpassungen an &ldquo;debian/rules&rdquo;</h2>

<p>An der Datei &ldquo;debian/rules&rdquo; müssen qualitativ diese Änderungen vorgenommen
werden:</p>

<ul>
<li>Einbinden der Datei /usr/share/quilt/quilt.make</li>
<li>Ziele &ldquo;patch&rdquo; und &ldquo;patch-stamp&rdquo; entfernen</li>
<li>Ziele &ldquo;debian/stamp-autogen&rdquo; und &ldquo;debian/stamp-configure&rdquo; neu aufnehmen
Bei &ldquo;debian/stamp-configure&rdquo; wird ein Verweis auf &ldquo;patches&rdquo; angelegt</li>
<li>Verweise auf &ldquo;patch-stamp&rdquo; ersetzen durch &ldquo;$(QUILT_STAMPFN)&rdquo;</li>
<li>Im Ziel &ldquo;clean&rdquo; diese Änderungen vornehmen:

<ul>
<li>Neue Abhängigkeit zu &ldquo;unpatch&rdquo; festlegen</li>
<li>Neuer Aufruf: dh_testdir</li>
<li>Neuer Aufruf: dh_clean</li>
<li>Verweis auf &ldquo;patches&rdquo; löschen</li>
<li>Manuelle Logik zum Zurücknehmen der Patches entfernen</li>
</ul>
</li>
</ul>


<p>Die Änderungen sind im nachfolgenden DIFF zusammengefasst.</p>

<p>{% codeblock Anpassungen an debian/rules lang:diff %}
&mdash;&ndash; ../git-1.8.2.1_ok/debian/rules  2013-04-13 19:55:00.061153212 +0200
+++ debian/rules    2013-04-14 09:36:24.782564149 +0200
@@ -37,19 +37,30 @@
 TMP =$(shell pwd)/tmp
 GIT =$(shell pwd)/debian/git</p>

<p>-patch: deb-checkdir patch-stamp
-patch-stamp:
&ndash;   cp gitk-git/gitk gitk-git/gitk.uli.orig
&ndash;   for i in <code>ls -1 debian/diff/*.diff debian/diff/*.patch \
-       2&gt;/dev/null || :</code>; do \
&ndash;     patch -p1 -N -r- &lt;$$i || test $$? = 1 || exit 1; \
&ndash;   done
&ndash;   touch patch-stamp
+include /usr/share/quilt/quilt.make
+
+debian/stamp-autogen:  $(QUILT_STAMPFN)
+   $(DONT_BE_ROOT)
+   ./autogen.sh
+   touch $@
+
+debian/stamp-configure:    $(QUILT_STAMPFN) debian/stamp-autogen
+   dh_testdir
+   test -e patches || ln -s debian/patches patches
+
+#patch: deb-checkdir patch-stamp
+#patch-stamp:
+#  cp gitk-git/gitk gitk-git/gitk.uli.orig
+#  for i in <code>ls -1 debian/diff/*.diff debian/diff/*.patch \
+#      2&gt;/dev/null || :</code>; do \
+#    patch -p1 -N -r- &lt;$$i || test $$? = 1 || exit 1; \
+#  done
+#  touch patch-stamp</p>

<p> build: build-arch build-indep</p>

<p> build-arch: deb-checkdir build-arch-stamp
-build-arch-stamp: patch-stamp
+build-arch-stamp: $(QUILT_STAMPFN)</p>

<pre><code>-$(CC) -v
DESTDIR='$(GIT)' $(MAKE) all $(OPTS)
cd contrib/subtree; DESTDIR='$(GIT)' $(MAKE) all $(OPTS)
</code></pre>

<p>@@ -66,7 +77,7 @@</p>

<pre><code>touch build-arch-stamp
</code></pre>

<p> build-indep: deb-checkdir build-indep-stamp
-build-indep-stamp: patch-stamp build-arch-stamp
+build-indep-stamp: $(QUILT_STAMPFN) build-arch-stamp</p>

<pre><code>: 'Work around bug #478524'
set -e; if test '$(BUILD_DOCS)' = 1; \
then \
</code></pre>

<p>@@ -74,14 +85,17 @@</p>

<pre><code>fi
touch build-indep-stamp
</code></pre>

<p>-clean: deb-checkdir
+clean: deb-checkdir unpatch
+   dh_testdir
+   dh_clean
+   $(RM) patches</p>

<pre><code>$(MAKE) clean $(OPTS)
cd contrib/subtree; $(MAKE) clean $(OPTS)
</code></pre>

<ul>
<li>! test -e patch-stamp || \</li>
<li>  for i in `ls -1r debian/diff/<em>.diff debian/diff/</em>.patch \</li>
<li><pre><code>  2&gt;/dev/null || :`; do \
</code></pre></li>
<li><pre><code>patch -p1 -NR -r- &lt;$$i || test $$? = 1 || exit 1; \
</code></pre></li>
<li>  done
+#  ! test -e patch-stamp || \
+#    for i in <code>ls -1r debian/diff/*.diff debian/diff/*.patch \
+#        2&gt;/dev/null || :</code>; do \
+#      patch -p1 -NR -r- &lt;$$i || test $$? = 1 || exit 1; \
+#    done
rm -rf &lsquo;$(TMP)&rsquo;
rm -f patch-stamp build-arch-stamp build-indep-stamp
rm -rf &lsquo;$(GIT)&rsquo; &lsquo;$(GIT)&rsquo;-doc &lsquo;$(GIT)&rsquo;-arch &lsquo;$(GIT)&rsquo;-cvs
{% endcodeblock %}</li>
</ul>


<h2>Neuerzeugung des Paketes</h2>

<p>Nun kann versucht werden, das Paket neu zu erzeugen mit <code>dpkg-buildpackage</code>.
Erwartungsgemäß scheitert die Erzeugung, weil einige Patches nicht sauber
durchlaufen. Korrigiert habe ich das so:</p>

<ul>
<li>In &ldquo;debian/patches/series&rdquo; folgende Patches deaktiviert:

<ul>
<li>0005-gitk-use-symbolic-font-names-sans-and-monospace-when-.diff</li>
<li>0006-gitk-Skip-over-AUTHOR-COMMIT_DATE-when-searching-all-.diff</li>
</ul>
</li>
<li>Bei allen übrigen Patches:

<ul>
<li><code>quilt push -f</code></li>
<li><code>quilt refresh</code></li>
<li><code>dpkg-buildpackage</code></li>
<li>&hellip; so oft wiederholen, bis es durchläuft</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Patchverwaltung mit Quilt]]></title>
    <link href="http://uli-heller.github.com/blog/2013/02/15/quilt/"/>
    <updated>2013-02-15T18:00:00+01:00</updated>
    <id>http://uli-heller.github.com/blog/2013/02/15/quilt</id>
    <content type="html"><![CDATA[<h1>Ubuntu-Pakete aktualisieren &ndash; Patchverwaltung mit Quilt</h1>

<p>Heute hatte ich die Idee, eine neue Version von NGINX zu erzeugen.
Grob sollte es nach diesem Muster klappen:</p>

<p>{% codeblock Paket aktualisieren lang:sh %}</p>

<h1>Quellen zum Ubuntu-Paket runterladen</h1>

<p>apt-get source nginx</p>

<h1>Aktuelle Nginx-Quellen runterladen</h1>

<p>wget -c <a href="http://nginx.org/download/nginx-1.2.7.tar.gz">http://nginx.org/download/nginx-1.2.7.tar.gz</a></p>

<h1>Paket aktualisieren</h1>

<p>cd nginx-1.1.19
uupdate -u ../nginx-1.2.7.tar.gz
cd ..</p>

<h1>Paket neu erzeugen</h1>

<p>cd nginx-1.2.7
dpkg-buildpackage
{% endcodeblock %}</p>

<p>Danach sollten die neuen Paketdateien bereit zur Installation sein.</p>

<h2>Fatales Problem</h2>

<p>Leider klappt&rsquo;s nicht, es gibt fatale Fehlermeldungen:</p>

<p>{% codeblock Fatale Fehler bei der Paketerzeugung lang:sh %}
uli@ubuntu-120464:/build/nginx/nginx-1.2.7$ dpkg-buildpackage
dpkg-buildpackage: export CFLAGS from dpkg-buildflags (origin: vendor): -g -O2 -fstack-protector &mdash;param=ssp-buffer-size=4 -Wformat -Wformat-security
dpkg-buildpackage: export CPPFLAGS from dpkg-buildflags (origin: vendor): -D_FORTIFY_SOURCE=2
&hellip;
 dpkg-source -b nginx-1.2.7
dpkg-source: Information: Quellformat »3.0 (quilt)« wird verwendet
dpkg-source: Information: nginx wird unter Benutzung des existierenden ./nginx_1.2.7.orig.tar.gz gebaut
patching file src/http/modules/perl/Makefile.PL
Hunk #2 FAILED at 14.
1 out of 2 hunks FAILED &mdash; saving rejects to file src/http/modules/perl/Makefile.PL.rej
dpkg-source: Fehler: Fehler-Exitstatus von LC_ALL=C patch -t -F 0 -N -p1 -u -V never -g0 -E -b -B .pc/perl-use-dpkg-buildflags.patch/ &lt; nginx-1.2.7.orig.OjasVr/debian/patches/perl-use-dpkg-buildflags.patch war 1
dpkg-buildpackage: Fehler: Fehler-Exitstatus von dpkg-source -b nginx-1.2.7 war 2
{% endcodeblock %}</p>

<h2>Korrektur</h2>

<p>In der Fehlermeldung erkennt man den Hinweis auf das Werkzeug QUILT.
Dieses verwaltet die Anpassungsdateien (patches) und kann auch zur Korrektur
der fehlerhaften Anpassungen verwendet werden.</p>

<p>Hier der Korrekturablauf:</p>

<p>{% codeblock Patch aktualisieren lang:sh %}
export QUILT_PATCHES=debian/patches
quilt push -f # &hellip; eigentlich hätte ich hier einen Fehler erwartet,</p>

<h1>stattdessen erscheint eine Meldung mit &ldquo;succeeded with fuzz&hellip;&rdquo;</h1>

<h1>Glück gehabt!</h1>

<p>quilt refresh
quilt pop -a
dpkg-buildpackage
{% endcodeblock %}</p>

<p>Nun läuft die Erzeugung durch, DEB-Dateien werden erstellt.</p>

<h2>Notizen</h2>

<h3>Diverse Befehle</h3>

<ul>
<li><code>sudo apt-get install devscripts</code></li>
<li><code>sudo apt-get build-dep nginx</code></li>
</ul>


<h3>Protokoll</h3>

<p>{% codeblock Protokoll: Fehler und Korrektur lang:sh %}
uli@ubuntu1204:/build/nginx/nginx-1.2.7$ dpkg-buildpackage
dpkg-buildpackage: export CFLAGS from dpkg-buildflags (origin: vendor): -g -O2 -fstack-protector &mdash;param=ssp-buffer-size=4 -Wformat -Wformat-security
dpkg-buildpackage: export CPPFLAGS from dpkg-buildflags (origin: vendor): -D_FORTIFY_SOURCE=2
dpkg-buildpackage: export CXXFLAGS from dpkg-buildflags (origin: vendor): -g -O2 -fstack-protector &mdash;param=ssp-buffer-size=4 -Wformat -Wformat-security
dpkg-buildpackage: export FFLAGS from dpkg-buildflags (origin: vendor): -g -O2
dpkg-buildpackage: export LDFLAGS from dpkg-buildflags (origin: vendor): -Wl,-Bsymbolic-functions -Wl,-z,relro
dpkg-buildpackage: source package nginx
dpkg-buildpackage: source version 1.2.7-0dp01~precise1
dpkg-buildpackage: source changed by Uli Heller <a href="&#109;&#x61;&#105;&#x6c;&#x74;&#111;&#58;&#x75;&#x6c;&#105;&#x2e;&#104;&#101;&#108;&#x6c;&#101;&#x72;&#x40;&#x64;&#x61;&#x65;&#x6d;&#x6f;&#110;&#115;&#45;&#x70;&#111;&#105;&#110;&#116;&#46;&#x63;&#111;&#x6d;">&#117;&#108;&#x69;&#46;&#x68;&#x65;&#x6c;&#x6c;&#x65;&#x72;&#64;&#x64;&#x61;&#x65;&#x6d;&#111;&#110;&#115;&#x2d;&#x70;&#111;&#105;&#110;&#x74;&#46;&#99;&#x6f;&#109;</a>
dpkg-buildpackage: host architecture i386
 dpkg-source &mdash;before-build nginx-1.2.7
 fakeroot debian/rules clean
dh_testdir
dh_testroot
rm -f build-stamp
rm -f config.sub config.guess
dh_clean
rm -rf /build/nginx/nginx-1.2.7/debian/modules/naxsi
rm -rf /build/nginx/nginx-1.2.7/debian/build-*
 dpkg-source -b nginx-1.2.7
dpkg-source: info: using source format `3.0 (quilt)&lsquo;
dpkg-source: info: building nginx using existing ./nginx_1.2.7.orig.tar.gz
patching file src/http/modules/perl/Makefile.PL
Hunk #2 FAILED at 14.
1 out of 2 hunks FAILED &mdash; saving rejects to file src/http/modules/perl/Makefile.PL.rej
dpkg-source: error: LC_ALL=C patch -t -F 0 -N -p1 -u -V never -g0 -E -b -B .pc/perl-use-dpkg-buildflags.patch/ &lt; nginx-1.2.7.orig.G94ZuW/debian/patches/perl-use-dpkg-buildflags.patch gave error exit status 1
dpkg-buildpackage: error: dpkg-source -b nginx-1.2.7 gave error exit status 2
uli@ubuntu1204:/build/nginx/nginx-1.2.7$ export QUILT_PATCHES=debian/patches
uli@ubuntu1204:/build/nginx/nginx-1.2.7$ quilt push -f
Applying patch perl-use-dpkg-buildflags.patch
patching file src/http/modules/perl/Makefile.PL
Hunk #2 succeeded at 14 with fuzz 1.</p>

<p>Now at patch perl-use-dpkg-buildflags.patch
uli@ubuntu1204:/build/nginx/nginx-1.2.7$ quilt refresh
Refreshed patch perl-use-dpkg-buildflags.patch
uli@ubuntu1204:/build/nginx/nginx-1.2.7$ quilt pop -a
Removing patch perl-use-dpkg-buildflags.patch
Restoring src/http/modules/perl/Makefile.PL</p>

<p>No patches applied
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
